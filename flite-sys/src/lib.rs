/* automatically generated by rust-bindgen */

#![allow(dead_code,
non_camel_case_types,
non_upper_case_globals,
non_snake_case)]
pub type size_t = usize;
pub enum __locale_data { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::default::Default for __locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
pub type cst_string = ::std::os::raw::c_char;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed1,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
::std::option::Option<unsafe extern "C" fn(__cookie:
                                           *mut ::std::os::raw::c_void,
                                           __buf:
                                           *mut ::std::os::raw::c_char,
                                           __nbytes: size_t)
                                           -> __ssize_t>;
pub type __io_write_fn =
::std::option::Option<unsafe extern "C" fn(__cookie:
                                           *mut ::std::os::raw::c_void,
                                           __buf:
                                           *const ::std::os::raw::c_char,
                                           __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
::std::option::Option<unsafe extern "C" fn(__cookie:
                                           *mut ::std::os::raw::c_void,
                                           __pos: *mut __off64_t,
                                           __w: ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_int>;
pub type __io_close_fn =
::std::option::Option<unsafe extern "C" fn(__cookie:
                                           *mut ::std::os::raw::c_void)
                                           -> ::std::os::raw::c_int>;
pub type off_t = __off_t;
pub type ssize_t = isize;
pub type fpos_t = _G_fpos_t;
pub type cst_file = *mut FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_filemap_struct {
    pub mem: *mut ::std::os::raw::c_void,
    pub fh: cst_file,
    pub mapsize: size_t,
    pub fd: ::std::os::raw::c_int,
}
impl ::std::default::Default for cst_filemap_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_filemap = cst_filemap_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_regex_struct {
    pub regstart: ::std::os::raw::c_char,
    pub reganch: ::std::os::raw::c_char,
    pub regmust: *mut ::std::os::raw::c_char,
    pub regmlen: ::std::os::raw::c_int,
    pub regsize: ::std::os::raw::c_int,
    pub program: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for cst_regex_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_regex = cst_regex_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_regstate_struct {
    pub startp: [*const ::std::os::raw::c_char; 10usize],
    pub endp: [*const ::std::os::raw::c_char; 10usize],
    pub input: *const ::std::os::raw::c_char,
    pub bol: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for cst_regstate_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_regstate = cst_regstate_struct;
pub type wchar_t = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum idtype_t { P_ALL = 0, P_PID = 1, P_PGID = 2, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __WAIT_STATUS {
    pub _bindgen_data_: [u64; 1usize],
}
impl __WAIT_STATUS {
    pub unsafe fn __uptr(&mut self) -> *mut *mut wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for __WAIT_STATUS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
                         -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
                         -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
                         -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed5 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
                         -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed5 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
                         -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
::std::option::Option<unsafe extern "C" fn(arg1:
                                           *const ::std::os::raw::c_void,
                                           arg2:
                                           *const ::std::os::raw::c_void)
                                           -> ::std::os::raw::c_int>;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
impl ::std::default::Default for __jmp_buf_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
pub type cst_alloc_context = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_val_cons_struct {
    pub car: *mut cst_val_struct,
    pub cdr: *mut cst_val_struct,
}
impl ::std::default::Default for cst_val_cons_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_val_cons = cst_val_cons_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_val_atom_struct {
    pub type_: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub v: Union_Unnamed6,
}
impl ::std::default::Default for cst_val_atom_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed6 {
    pub unsafe fn fval(&mut self) -> *mut f64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ival(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn vval(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_val_atom = cst_val_atom_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_val_struct {
    pub c: Union_Unnamed7,
}
impl ::std::default::Default for cst_val_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed7 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed7 {
    pub unsafe fn cc(&mut self) -> *mut cst_val_cons {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn a(&mut self) -> *mut cst_val_atom {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_val = cst_val_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_val_def_struct {
    pub name: *const ::std::os::raw::c_char,
    pub delete_function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut ::std::os::raw::c_void)>,
}
impl ::std::default::Default for cst_val_def_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_val_def = cst_val_def_struct;
pub type cst_userdata = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_featvalpair_struct {
    pub name: *const ::std::os::raw::c_char,
    pub val: *mut cst_val,
    pub next: *mut cst_featvalpair_struct,
}
impl ::std::default::Default for cst_featvalpair_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_featvalpair = cst_featvalpair_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_features_struct {
    pub head: *mut cst_featvalpair_struct,
    pub ctx: cst_alloc_context,
    pub owned_strings: *mut cst_val,
    pub linked: *const cst_features_struct,
}
impl ::std::default::Default for cst_features_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_features = cst_features_struct;
pub type cst_relation = cst_relation_struct;
pub type cst_utterance = cst_utterance_struct;
pub type cst_item = cst_item_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_item_contents_struct {
    pub features: *mut cst_features,
    pub relations: *mut cst_features,
}
impl ::std::default::Default for cst_item_contents_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_item_contents = cst_item_contents_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_item_struct {
    pub contents: *mut cst_item_contents,
    pub relation: *mut cst_relation,
    pub n: *mut cst_item,
    pub p: *mut cst_item,
    pub u: *mut cst_item,
    pub d: *mut cst_item,
}
impl ::std::default::Default for cst_item_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_ffunction =
::std::option::Option<unsafe extern "C" fn(i: *const cst_item)
                                           -> *const cst_val>;
pub type cst_itemfunc =
::std::option::Option<unsafe extern "C" fn(i: *mut cst_item)
                                           -> *mut cst_val>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_utterance_struct {
    pub features: *mut cst_features,
    pub ffunctions: *mut cst_features,
    pub relations: *mut cst_features,
    pub ctx: cst_alloc_context,
}
impl ::std::default::Default for cst_utterance_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_uttfunc =
::std::option::Option<unsafe extern "C" fn(i: *mut cst_utterance)
                                           -> *mut cst_utterance>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_relation_struct {
    pub name: *mut ::std::os::raw::c_char,
    pub features: *mut cst_features,
    pub utterance: *mut cst_utterance,
    pub head: *mut cst_item,
    pub tail: *mut cst_item,
}
impl ::std::default::Default for cst_relation_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_wave_struct {
    pub type_: *const ::std::os::raw::c_char,
    pub sample_rate: ::std::os::raw::c_int,
    pub num_samples: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
    pub samples: *mut ::std::os::raw::c_short,
}
impl ::std::default::Default for cst_wave_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_wave = cst_wave_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_wave_header_struct {
    pub type_: *const ::std::os::raw::c_char,
    pub hsize: ::std::os::raw::c_int,
    pub num_bytes: ::std::os::raw::c_int,
    pub sample_rate: ::std::os::raw::c_int,
    pub num_samples: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
}
impl ::std::default::Default for cst_wave_header_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_wave_header = cst_wave_header_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_rateconv_struct {
    pub channels: ::std::os::raw::c_int,
    pub up: ::std::os::raw::c_int,
    pub down: ::std::os::raw::c_int,
    pub gain: f64,
    pub lag: ::std::os::raw::c_int,
    pub sin: *mut ::std::os::raw::c_int,
    pub sout: *mut ::std::os::raw::c_int,
    pub coep: *mut ::std::os::raw::c_int,
    pub insize: ::std::os::raw::c_int,
    pub outsize: ::std::os::raw::c_int,
    pub incount: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
    pub fsin: f64,
    pub fgk: f64,
    pub fgg: f64,
    pub inbaseidx: ::std::os::raw::c_int,
    pub inoffset: ::std::os::raw::c_int,
    pub cycctr: ::std::os::raw::c_int,
    pub outidx: ::std::os::raw::c_int,
}
impl ::std::default::Default for cst_rateconv_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_rateconv = cst_rateconv_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct snd_header {
    pub magic: ::std::os::raw::c_uint,
    pub hdr_size: ::std::os::raw::c_uint,
    pub data_size: ::std::os::raw::c_int,
    pub encoding: ::std::os::raw::c_uint,
    pub sample_rate: ::std::os::raw::c_uint,
    pub channels: ::std::os::raw::c_uint,
}
impl ::std::default::Default for snd_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_track_struct {
    pub type_: *const ::std::os::raw::c_char,
    pub num_frames: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
    pub times: *mut f32,
    pub frames: *mut *mut f32,
}
impl ::std::default::Default for cst_track_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_track = cst_track_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_cart_node_struct {
    pub feat: ::std::os::raw::c_uchar,
    pub op: ::std::os::raw::c_uchar,
    pub no_node: ::std::os::raw::c_ushort,
    pub val: *const cst_val,
}
impl ::std::default::Default for cst_cart_node_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_cart_node = cst_cart_node_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_cart_struct {
    pub rule_table: *const cst_cart_node,
    pub feat_table: *const *const ::std::os::raw::c_char,
}
impl ::std::default::Default for cst_cart_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_cart = cst_cart_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_phoneset_struct {
    pub name: *const ::std::os::raw::c_char,
    pub featnames: *const *const ::std::os::raw::c_char,
    pub featvals: *const *const cst_val,
    pub phonenames: *const *const ::std::os::raw::c_char,
    pub silence: *const ::std::os::raw::c_char,
    pub num_phones: ::std::os::raw::c_int,
    pub fvtable: *const *const ::std::os::raw::c_int,
    pub freeable: ::std::os::raw::c_int,
}
impl ::std::default::Default for cst_phoneset_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_phoneset = cst_phoneset_struct;
pub type cst_lts_addr = ::std::os::raw::c_ushort;
pub type cst_lts_phone = ::std::os::raw::c_int;
pub type cst_lts_feat = ::std::os::raw::c_uchar;
pub type cst_lts_letter = ::std::os::raw::c_uchar;
pub type cst_lts_model = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_lts_rules_struct {
    pub name: *mut ::std::os::raw::c_char,
    pub letter_index: *const cst_lts_addr,
    pub models: *const cst_lts_model,
    pub phone_table: *const *const ::std::os::raw::c_char,
    pub context_window_size: ::std::os::raw::c_int,
    pub context_extra_feats: ::std::os::raw::c_int,
    pub letter_table: *const *const ::std::os::raw::c_char,
}
impl ::std::default::Default for cst_lts_rules_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_lts_rules = cst_lts_rules_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_lts_rule_struct {
    pub feat: cst_lts_feat,
    pub val: cst_lts_letter,
    pub qtrue: cst_lts_addr,
    pub qfalse: cst_lts_addr,
}
impl ::std::default::Default for cst_lts_rule_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_lts_rule = cst_lts_rule_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lexicon_struct {
    pub name: *mut ::std::os::raw::c_char,
    pub num_entries: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_uchar,
    pub num_bytes: ::std::os::raw::c_int,
    pub phone_table: *mut *mut ::std::os::raw::c_char,
    pub lts_rule_set: *mut cst_lts_rules,
    pub syl_boundary: ::std::option::Option<unsafe extern "C" fn(i:
                                                                 *const cst_item,
                                                                 p:
                                                                 *const cst_val)
                                                                 -> ::std::os::raw::c_int>,
    pub lts_function: ::std::option::Option<unsafe extern "C" fn(l:
                                                                 *const lexicon_struct,
                                                                 word:
                                                                 *const ::std::os::raw::c_char,
                                                                 pos:
                                                                 *const ::std::os::raw::c_char,
                                                                 feats:
                                                                 *const cst_features)
                                                                 -> *mut cst_val>,
    pub addenda: *mut *mut *mut ::std::os::raw::c_char,
    pub phone_hufftable: *const *const ::std::os::raw::c_char,
    pub entry_hufftable: *const *const ::std::os::raw::c_char,
    pub postlex: ::std::option::Option<unsafe extern "C" fn(u:
                                                            *mut cst_utterance)
                                                            -> *mut cst_utterance>,
    pub lex_addenda: *mut cst_val,
}
impl ::std::default::Default for lexicon_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_lexicon = lexicon_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_voice_struct {
    pub name: *const ::std::os::raw::c_char,
    pub features: *mut cst_features,
    pub ffunctions: *mut cst_features,
    pub utt_init: ::std::option::Option<unsafe extern "C" fn(u:
                                                             *mut cst_utterance,
                                                             v:
                                                             *mut cst_voice_struct)
                                                             -> *mut cst_utterance>,
}
impl ::std::default::Default for cst_voice_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_voice = cst_voice_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_lang_struct {
    pub lang: *const ::std::os::raw::c_char,
    pub lang_init: ::std::option::Option<unsafe extern "C" fn(vox:
                                                              *mut cst_voice)>,
    pub lex_init: ::std::option::Option<extern "C" fn() -> *mut cst_lexicon>,
}
impl ::std::default::Default for cst_lang_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_lang = cst_lang_struct;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cst_audiofmt {
    CST_AUDIO_LINEAR16 = 0,
    CST_AUDIO_LINEAR8 = 1,
    CST_AUDIO_MULAW = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_audiodev_struct {
    pub sps: ::std::os::raw::c_int,
    pub real_sps: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub real_channels: ::std::os::raw::c_int,
    pub fmt: cst_audiofmt,
    pub real_fmt: cst_audiofmt,
    pub byteswap: ::std::os::raw::c_int,
    pub rateconv: *mut cst_rateconv,
    pub platform_data: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for cst_audiodev_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_audiodev = cst_audiodev_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_audio_streaming_info_struct {
    pub min_buffsize: ::std::os::raw::c_int,
    pub asc: ::std::option::Option<unsafe extern "C" fn(w: *const cst_wave,
                                                        start:
                                                        ::std::os::raw::c_int,
                                                        size:
                                                        ::std::os::raw::c_int,
                                                        last:
                                                        ::std::os::raw::c_int,
                                                        asi:
                                                        *mut cst_audio_streaming_info_struct)
                                                        -> ::std::os::raw::c_int>,
    pub utt: *const cst_utterance,
    pub item: *const cst_item,
    pub userdata: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for cst_audio_streaming_info_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_audio_streaming_info = cst_audio_streaming_info_struct;
pub type cst_audio_stream_callback =
::std::option::Option<unsafe extern "C" fn(w: *const cst_wave,
                                           start: ::std::os::raw::c_int,
                                           size: ::std::os::raw::c_int,
                                           last: ::std::os::raw::c_int,
                                           asi:
                                           *mut cst_audio_streaming_info)
                                           -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct cst_tokenstream_struct {
    pub fd: cst_file,
    pub file_pos: ::std::os::raw::c_int,
    pub line_number: ::std::os::raw::c_int,
    pub eof_flag: ::std::os::raw::c_int,
    pub string_buffer: *mut cst_string,
    pub current_char: ::std::os::raw::c_int,
    pub token_pos: ::std::os::raw::c_int,
    pub ws_max: ::std::os::raw::c_int,
    pub whitespace: *mut cst_string,
    pub prep_max: ::std::os::raw::c_int,
    pub prepunctuation: *mut cst_string,
    pub token_max: ::std::os::raw::c_int,
    pub token: *mut cst_string,
    pub postp_max: ::std::os::raw::c_int,
    pub postpunctuation: *mut cst_string,
    pub tags: *mut cst_features,
    pub utf8_explode_mode: ::std::os::raw::c_int,
    pub streamtype_data: *mut ::std::os::raw::c_void,
    pub p_whitespacesymbols: *const cst_string,
    pub p_singlecharsymbols: *const cst_string,
    pub p_prepunctuationsymbols: *const cst_string,
    pub p_postpunctuationsymbols: *const cst_string,
    pub charclass: [cst_string; 256usize],
    pub open: ::std::option::Option<unsafe extern "C" fn(ts:
                                                         *mut cst_tokenstream_struct,
                                                         filename:
                                                         *const ::std::os::raw::c_char)
                                                         -> ::std::os::raw::c_int>,
    pub close: ::std::option::Option<unsafe extern "C" fn(ts:
                                                          *mut cst_tokenstream_struct)>,
    pub eof: ::std::option::Option<unsafe extern "C" fn(ts:
                                                        *mut cst_tokenstream_struct)
                                                        -> ::std::os::raw::c_int>,
    pub seek: ::std::option::Option<unsafe extern "C" fn(ts:
                                                         *mut cst_tokenstream_struct,
                                                         pos:
                                                         ::std::os::raw::c_int)
                                                         -> ::std::os::raw::c_int>,
    pub tell: ::std::option::Option<unsafe extern "C" fn(ts:
                                                         *mut cst_tokenstream_struct)
                                                         -> ::std::os::raw::c_int>,
    pub size: ::std::option::Option<unsafe extern "C" fn(ts:
                                                         *mut cst_tokenstream_struct)
                                                         -> ::std::os::raw::c_int>,
    pub getc: ::std::option::Option<unsafe extern "C" fn(ts:
                                                         *mut cst_tokenstream_struct)
                                                         -> ::std::os::raw::c_int>,
}
impl ::std::clone::Clone for cst_tokenstream_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for cst_tokenstream_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_tokenstream = cst_tokenstream_struct;
pub type cst_breakfunc =
::std::option::Option<unsafe extern "C" fn(ts: *mut cst_tokenstream,
                                           token:
                                           *const ::std::os::raw::c_char,
                                           tokens: *mut cst_relation)
                                           -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_dur_stats_struct {
    pub phone: *mut ::std::os::raw::c_char,
    pub mean: f32,
    pub stddev: f32,
}
impl ::std::default::Default for cst_dur_stats_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dur_stat = cst_dur_stats_struct;
pub type dur_stats = *mut dur_stat;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_synth_module_struct {
    pub hookname: *const ::std::os::raw::c_char,
    pub defhook: cst_uttfunc,
}
impl ::std::default::Default for cst_synth_module_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_synth_module = cst_synth_module_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_sts_struct {
    pub frame: *const ::std::os::raw::c_ushort,
    pub size: ::std::os::raw::c_int,
    pub residual: *const ::std::os::raw::c_uchar,
}
impl ::std::default::Default for cst_sts_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_sts = cst_sts_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_sts_paged_struct {
    pub frame_offset: ::std::os::raw::c_uint,
    pub res_size: ::std::os::raw::c_ushort,
    pub res_offset: ::std::os::raw::c_uint,
    pub frame_page: *const ::std::os::raw::c_ushort,
    pub res_page: *const ::std::os::raw::c_uchar,
}
impl ::std::default::Default for cst_sts_paged_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_sts_paged = cst_sts_paged_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_sts_list_struct {
    pub sts: *const cst_sts,
    pub sts_paged: *const cst_sts_paged,
    pub frames: *const ::std::os::raw::c_ushort,
    pub residuals: *const ::std::os::raw::c_uchar,
    pub resoffs: *const ::std::os::raw::c_uint,
    pub ressizes: *const ::std::os::raw::c_uchar,
    pub num_sts: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
    pub sample_rate: ::std::os::raw::c_int,
    pub coeff_min: f32,
    pub coeff_range: f32,
    pub codec: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for cst_sts_list_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_sts_list = cst_sts_list_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct cst_lpcres_struct {
    pub frames: *mut *const ::std::os::raw::c_ushort,
    pub times: *mut ::std::os::raw::c_int,
    pub num_frames: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
    pub lpc_min: f32,
    pub lpc_range: f32,
    pub num_samples: ::std::os::raw::c_int,
    pub sample_rate: ::std::os::raw::c_int,
    pub sizes: *mut ::std::os::raw::c_int,
    pub residual: *mut ::std::os::raw::c_uchar,
    pub asi: *mut cst_audio_streaming_info,
    pub packed_residuals: *mut *const ::std::os::raw::c_uchar,
    pub delayed_decoding: ::std::os::raw::c_int,
}
impl ::std::default::Default for cst_lpcres_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cst_lpcres = cst_lpcres_struct;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "flite", kind = "dylib")]
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static cst_rx_white: *const cst_regex;
    pub static cst_rx_alpha: *const cst_regex;
    pub static cst_rx_uppercase: *const cst_regex;
    pub static cst_rx_lowercase: *const cst_regex;
    pub static cst_rx_alphanum: *const cst_regex;
    pub static cst_rx_identifier: *const cst_regex;
    pub static cst_rx_int: *const cst_regex;
    pub static cst_rx_double: *const cst_regex;
    pub static cst_rx_commaint: *const cst_regex;
    pub static cst_rx_digits: *const cst_regex;
    pub static cst_rx_dotted_abbrev: *const cst_regex;
    pub static mut cst_regex_table: [*const cst_regex; 0usize];
    pub static mut cst_errjmp: *mut jmp_buf;
    pub static val_int_0: cst_val;
    pub static val_int_1: cst_val;
    pub static val_int_2: cst_val;
    pub static val_int_3: cst_val;
    pub static val_int_4: cst_val;
    pub static val_int_5: cst_val;
    pub static val_int_6: cst_val;
    pub static val_int_7: cst_val;
    pub static val_int_8: cst_val;
    pub static val_int_9: cst_val;
    pub static val_int_10: cst_val;
    pub static val_int_11: cst_val;
    pub static val_int_12: cst_val;
    pub static val_int_13: cst_val;
    pub static val_int_14: cst_val;
    pub static val_int_15: cst_val;
    pub static val_int_16: cst_val;
    pub static val_int_17: cst_val;
    pub static val_int_18: cst_val;
    pub static val_int_19: cst_val;
    pub static val_int_20: cst_val;
    pub static val_int_21: cst_val;
    pub static val_int_22: cst_val;
    pub static val_int_23: cst_val;
    pub static val_int_24: cst_val;
    pub static val_string_0: cst_val;
    pub static val_string_1: cst_val;
    pub static val_string_2: cst_val;
    pub static val_string_3: cst_val;
    pub static val_string_4: cst_val;
    pub static val_string_5: cst_val;
    pub static val_string_6: cst_val;
    pub static val_string_7: cst_val;
    pub static val_string_8: cst_val;
    pub static val_string_9: cst_val;
    pub static val_string_10: cst_val;
    pub static val_string_11: cst_val;
    pub static val_string_12: cst_val;
    pub static val_string_13: cst_val;
    pub static val_string_14: cst_val;
    pub static val_string_15: cst_val;
    pub static val_string_16: cst_val;
    pub static val_string_17: cst_val;
    pub static val_string_18: cst_val;
    pub static val_string_19: cst_val;
    pub static val_string_20: cst_val;
    pub static val_string_21: cst_val;
    pub static val_string_22: cst_val;
    pub static val_string_23: cst_val;
    pub static val_string_24: cst_val;
    pub static mut cst_val_defs: [cst_val_def; 0usize];
    pub static cst_val_type_userdata: ::std::os::raw::c_int;
    pub static cst_val_type_features: ::std::os::raw::c_int;
    pub static cst_val_type_relation: ::std::os::raw::c_int;
    pub static cst_val_type_item: ::std::os::raw::c_int;
    pub static cst_val_type_utterance: ::std::os::raw::c_int;
    pub static cst_val_type_ffunc: ::std::os::raw::c_int;
    pub static cst_val_type_itemfunc: ::std::os::raw::c_int;
    pub static cst_val_type_uttfunc: ::std::os::raw::c_int;
    pub static cst_endian_loc: ::std::os::raw::c_int;
    pub static cst_val_type_wave: ::std::os::raw::c_int;
    pub static cst_val_type_track: ::std::os::raw::c_int;
    pub static cst_val_type_cart: ::std::os::raw::c_int;
    pub static cst_val_type_phoneset: ::std::os::raw::c_int;
    pub static cst_val_type_lexicon: ::std::os::raw::c_int;
    pub static cst_val_type_voice: ::std::os::raw::c_int;
    pub static cst_val_type_audio_streaming_info: ::std::os::raw::c_int;
    pub static cst_ts_default_whitespacesymbols: *const cst_string;
    pub static cst_ts_default_prepunctuationsymbols: *const cst_string;
    pub static cst_ts_default_postpunctuationsymbols: *const cst_string;
    pub static cst_ts_default_singlecharsymbols: *const cst_string;
    pub static cst_val_type_breakfunc: ::std::os::raw::c_int;
    pub static cst_val_type_dur_stats: ::std::os::raw::c_int;
    pub static cst_val_type_lpcres: ::std::os::raw::c_int;
    pub static cst_val_type_sts_list: ::std::os::raw::c_int;
    pub static mut flite_voice_list: *mut cst_val;
    pub static mut flite_lang_list: [cst_lang; 20usize];
}
#[link(name = "flite", kind = "dylib")]
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
                  -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
                   -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
                   -> ::std::os::raw::c_ulong;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
                     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_ulong;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_ulong;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
                      -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_ulong;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
                   -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
                    -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
                      -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
                      -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
                -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
                      -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
                       -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
                     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
                     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn cst_atof(str: *const ::std::os::raw::c_char) -> f64;
    pub fn cst_strdup(s: *const cst_string) -> *mut cst_string;
    pub fn cst_strchr(s: *const cst_string, c: ::std::os::raw::c_int)
                      -> *mut cst_string;
    pub fn cst_strrchr(str: *const cst_string, c: ::std::os::raw::c_int)
                       -> *mut cst_string;
    pub fn cst_member_string(str: *const ::std::os::raw::c_char,
                             slist: *const *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    pub fn cst_substr(str: *const ::std::os::raw::c_char,
                      start: ::std::os::raw::c_int,
                      length: ::std::os::raw::c_int)
                      -> *mut ::std::os::raw::c_char;
    pub fn cst_string_before(s: *const ::std::os::raw::c_char,
                             c: *const ::std::os::raw::c_char)
                             -> *mut ::std::os::raw::c_char;
    pub fn cst_strcat(a: *const ::std::os::raw::c_char,
                      b: *const ::std::os::raw::c_char)
                      -> *mut ::std::os::raw::c_char;
    pub fn cst_strcat3(a: *const ::std::os::raw::c_char,
                       b: *const ::std::os::raw::c_char,
                       c: *const ::std::os::raw::c_char)
                       -> *mut ::std::os::raw::c_char;
    pub fn cst_downcase(str: *const cst_string) -> *mut cst_string;
    pub fn cst_upcase(str: *const cst_string) -> *mut cst_string;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
                      -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
                    -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
                   -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
                   -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
                  -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
                   -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
                    -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
                   -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
                  -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
                 -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
                  -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
                 -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
                -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
                          -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
                         -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
                            -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
                -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
                 -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
                  -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
                           -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
                   -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
                   -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn cst_fopen(path: *const ::std::os::raw::c_char,
                     mode: ::std::os::raw::c_int) -> cst_file;
    pub fn cst_fwrite(fh: cst_file, buf: *const ::std::os::raw::c_void,
                      size: ::std::os::raw::c_long,
                      count: ::std::os::raw::c_long)
                      -> ::std::os::raw::c_long;
    pub fn cst_fread(fh: cst_file, buf: *mut ::std::os::raw::c_void,
                     size: ::std::os::raw::c_long,
                     count: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn cst_fprintf(fh: cst_file, fmt: *const ::std::os::raw::c_char, ...)
                       -> ::std::os::raw::c_int;
    pub fn cst_sprintf(s: *mut ::std::os::raw::c_char,
                       fmt: *const ::std::os::raw::c_char, ...)
                       -> ::std::os::raw::c_int;
    pub fn cst_fclose(fh: cst_file) -> ::std::os::raw::c_int;
    pub fn cst_fgetc(fh: cst_file) -> ::std::os::raw::c_int;
    pub fn cst_ftell(fh: cst_file) -> ::std::os::raw::c_long;
    pub fn cst_fseek(fh: cst_file, pos: ::std::os::raw::c_long,
                     whence: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn cst_filesize(fh: cst_file) -> ::std::os::raw::c_long;
    pub fn cst_mmap_file(path: *const ::std::os::raw::c_char)
                         -> *mut cst_filemap;
    pub fn cst_munmap_file(map: *mut cst_filemap) -> ::std::os::raw::c_int;
    pub fn cst_read_whole_file(path: *const ::std::os::raw::c_char)
                               -> *mut cst_filemap;
    pub fn cst_free_whole_file(map: *mut cst_filemap)
                               -> ::std::os::raw::c_int;
    pub fn cst_read_part_file(path: *const ::std::os::raw::c_char)
                              -> *mut cst_filemap;
    pub fn cst_free_part_file(map: *mut cst_filemap) -> ::std::os::raw::c_int;
    pub fn cst_urlp(url: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn cst_url_open(url: *const ::std::os::raw::c_char) -> cst_file;
    pub fn new_cst_regex(str: *const ::std::os::raw::c_char)
                         -> *mut cst_regex;
    pub fn delete_cst_regex(r: *mut cst_regex);
    pub fn cst_regex_match(r: *const cst_regex,
                           str: *const ::std::os::raw::c_char)
                           -> ::std::os::raw::c_int;
    pub fn cst_regex_match_return(r: *const cst_regex,
                                  str: *const ::std::os::raw::c_char)
                                  -> *mut cst_regstate;
    pub fn hs_regcomp(arg1: *const ::std::os::raw::c_char) -> *mut cst_regex;
    pub fn hs_regexec(arg1: *const cst_regex,
                      arg2: *const ::std::os::raw::c_char)
                      -> *mut cst_regstate;
    pub fn hs_regdelete(arg1: *mut cst_regex);
    pub fn cst_regsub(r: *const cst_regstate,
                      in_: *const ::std::os::raw::c_char,
                      out: *mut ::std::os::raw::c_char, max: size_t)
                      -> size_t;
    pub fn cst_regex_init();
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
                -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
                -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
                 -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
                  -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
                   -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
                   -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
                    -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
                   -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
                         -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
                         -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
                           -> ::std::os::raw::c_ulonglong;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
                    -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
                     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut random_data)
                       -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
                  -> ::std::os::raw::c_int;
    pub fn drand48() -> f64;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
                   -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
                   -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
                  -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
                     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
                     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
                     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
                     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
                     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
                     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
                          -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
                         -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
                  -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
                         -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                   ::std::option::Option<unsafe extern "C" fn(__status:
                                                              ::std::os::raw::c_int,
                                                              __arg:
                                                              *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
                   -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
                   -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
                    -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
                 -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
               -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
                -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
                -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
                -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
                 -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
                 -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
                 -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
                  -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
                  -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
                   -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
                   -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
                 -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
                  -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
                     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
                      -> ::std::os::raw::c_int;
    pub fn setjmp(__env: jmp_buf) -> ::std::os::raw::c_int;
    pub fn __sigsetjmp(__env: *mut __jmp_buf_tag,
                       __savemask: ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
    pub fn siglongjmp(__env: sigjmp_buf, __val: ::std::os::raw::c_int);
    pub fn cst_errmsg(fmt: *const ::std::os::raw::c_char, ...)
                      -> ::std::os::raw::c_int;
    pub fn cst_safe_alloc(size: ::std::os::raw::c_int)
                          -> *mut ::std::os::raw::c_void;
    pub fn cst_safe_calloc(size: ::std::os::raw::c_int)
                           -> *mut ::std::os::raw::c_void;
    pub fn cst_safe_realloc(p: *mut ::std::os::raw::c_void,
                            size: ::std::os::raw::c_int)
                            -> *mut ::std::os::raw::c_void;
    pub fn cst_free(p: *mut ::std::os::raw::c_void);
    pub fn int_val(i: ::std::os::raw::c_int) -> *mut cst_val;
    pub fn float_val(f: f32) -> *mut cst_val;
    pub fn string_val(s: *const ::std::os::raw::c_char) -> *mut cst_val;
    pub fn val_new_typed(type_: ::std::os::raw::c_int,
                         vv: *mut ::std::os::raw::c_void) -> *mut cst_val;
    pub fn cons_val(a: *const cst_val, b: *const cst_val) -> *mut cst_val;
    pub fn delete_val(val: *mut cst_val);
    pub fn delete_val_list(val: *mut cst_val);
    pub fn val_int(v: *const cst_val) -> ::std::os::raw::c_int;
    pub fn val_float(v: *const cst_val) -> f32;
    pub fn val_string(v: *const cst_val) -> *const ::std::os::raw::c_char;
    pub fn val_void(v: *const cst_val) -> *mut ::std::os::raw::c_void;
    pub fn val_generic(v: *const cst_val, type_: ::std::os::raw::c_int,
                       stype: *const ::std::os::raw::c_char)
                       -> *mut ::std::os::raw::c_void;
    pub fn val_car(v: *const cst_val) -> *const cst_val;
    pub fn val_cdr(v: *const cst_val) -> *const cst_val;
    pub fn set_cdr(v1: *mut cst_val, v2: *const cst_val) -> *const cst_val;
    pub fn set_car(v1: *mut cst_val, v2: *const cst_val) -> *const cst_val;
    pub fn cst_val_consp(v: *const cst_val) -> ::std::os::raw::c_int;
    pub fn val_equal(a: *const cst_val, b: *const cst_val)
                     -> ::std::os::raw::c_int;
    pub fn val_less(a: *const cst_val, b: *const cst_val)
                    -> ::std::os::raw::c_int;
    pub fn val_greater(a: *const cst_val, b: *const cst_val)
                       -> ::std::os::raw::c_int;
    pub fn val_member(a: *const cst_val, b: *const cst_val)
                      -> ::std::os::raw::c_int;
    pub fn val_member_string(a: *const ::std::os::raw::c_char,
                             b: *const cst_val) -> ::std::os::raw::c_int;
    pub fn val_stringp(a: *const cst_val) -> ::std::os::raw::c_int;
    pub fn val_assoc_string(v1: *const ::std::os::raw::c_char,
                            al: *const cst_val) -> *const cst_val;
    pub fn val_print(fd: cst_file, v: *const cst_val);
    pub fn val_readlist_string(str: *const ::std::os::raw::c_char)
                               -> *mut cst_val;
    pub fn val_reverse(v: *mut cst_val) -> *mut cst_val;
    pub fn val_append(a: *mut cst_val, b: *mut cst_val) -> *mut cst_val;
    pub fn val_length(l: *const cst_val) -> ::std::os::raw::c_int;
    pub fn cst_utf8_explode(utf8string: *const cst_string) -> *mut cst_val;
    pub fn cst_implode(string_list: *const cst_val) -> *mut cst_string;
    pub fn cst_utf8_ord(utf8_char: *const cst_val) -> *mut cst_val;
    pub fn cst_utf8_chr(ord: *const cst_val) -> *mut cst_val;
    pub fn cst_utf8_ord_string(utf8_char: *const ::std::os::raw::c_char)
                               -> ::std::os::raw::c_int;
    pub fn val_dec_refcount(b: *const cst_val) -> ::std::os::raw::c_int;
    pub fn val_inc_refcount(b: *const cst_val) -> *mut cst_val;
    pub fn val_int_n(n: ::std::os::raw::c_int) -> *const cst_val;
    pub fn val_string_n(n: ::std::os::raw::c_int) -> *const cst_val;
    pub fn val_userdata(v: *const cst_val) -> *mut cst_userdata;
    pub fn userdata_val(v: *const cst_userdata) -> *mut cst_val;
    pub fn new_features() -> *mut cst_features;
    pub fn new_features_local(ctx: cst_alloc_context) -> *mut cst_features;
    pub fn delete_features(f: *mut cst_features);
    pub fn feat_int(f: *const cst_features,
                    name: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn feat_float(f: *const cst_features,
                      name: *const ::std::os::raw::c_char) -> f32;
    pub fn feat_string(f: *const cst_features,
                       name: *const ::std::os::raw::c_char)
                       -> *const ::std::os::raw::c_char;
    pub fn feat_val(f: *const cst_features,
                    name: *const ::std::os::raw::c_char) -> *const cst_val;
    pub fn get_param_int(f: *const cst_features,
                         name: *const ::std::os::raw::c_char,
                         def: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn get_param_float(f: *const cst_features,
                           name: *const ::std::os::raw::c_char, def: f32)
                           -> f32;
    pub fn get_param_string(f: *const cst_features,
                            name: *const ::std::os::raw::c_char,
                            def: *const ::std::os::raw::c_char)
                            -> *const ::std::os::raw::c_char;
    pub fn get_param_val(f: *const cst_features,
                         name: *const ::std::os::raw::c_char,
                         def: *mut cst_val) -> *const cst_val;
    pub fn feat_set_int(f: *mut cst_features,
                        name: *const ::std::os::raw::c_char,
                        v: ::std::os::raw::c_int);
    pub fn feat_set_float(f: *mut cst_features,
                          name: *const ::std::os::raw::c_char, v: f32);
    pub fn feat_set_string(f: *mut cst_features,
                           name: *const ::std::os::raw::c_char,
                           v: *const ::std::os::raw::c_char);
    pub fn feat_set(f: *mut cst_features, name: *const ::std::os::raw::c_char,
                    v: *const cst_val);
    pub fn feat_remove(f: *mut cst_features,
                       name: *const ::std::os::raw::c_char)
                       -> ::std::os::raw::c_int;
    pub fn feat_present(f: *const cst_features,
                        name: *const ::std::os::raw::c_char)
                        -> ::std::os::raw::c_int;
    pub fn feat_length(f: *const cst_features) -> ::std::os::raw::c_int;
    pub fn feat_own_string(f: *mut cst_features,
                           name: *const ::std::os::raw::c_char)
                           -> *const ::std::os::raw::c_char;
    pub fn val_features(v: *const cst_val) -> *mut cst_features;
    pub fn features_val(v: *const cst_features) -> *mut cst_val;
    pub fn feat_copy_into(from: *const cst_features, to: *mut cst_features)
                          -> ::std::os::raw::c_int;
    pub fn feat_link_into(from: *const cst_features, to: *mut cst_features)
                          -> ::std::os::raw::c_int;
    pub fn cst_feat_print(fd: cst_file, f: *const cst_features)
                          -> ::std::os::raw::c_int;
    pub fn val_relation(v: *const cst_val) -> *mut cst_relation;
    pub fn relation_val(v: *const cst_relation) -> *mut cst_val;
    pub fn val_item(v: *const cst_val) -> *mut cst_item;
    pub fn item_val(v: *const cst_item) -> *mut cst_val;
    pub fn val_utterance(v: *const cst_val) -> *mut cst_utterance;
    pub fn utterance_val(v: *const cst_utterance) -> *mut cst_val;
    pub fn new_item_relation(r: *mut cst_relation, i: *mut cst_item)
                             -> *mut cst_item;
    pub fn new_item_contents(i: *mut cst_item) -> *mut cst_item_contents;
    pub fn delete_item(item: *mut cst_item);
    pub fn item_contents_set(current: *mut cst_item, i: *mut cst_item);
    pub fn item_unref_contents(i: *mut cst_item);
    pub fn item_as(i: *const cst_item, rname: *const ::std::os::raw::c_char)
                   -> *mut cst_item;
    pub fn item_utt(i: *const cst_item) -> *mut cst_utterance;
    pub fn item_next(i: *const cst_item) -> *mut cst_item;
    pub fn item_prev(i: *const cst_item) -> *mut cst_item;
    pub fn item_append(i: *mut cst_item, new_item: *mut cst_item)
                       -> *mut cst_item;
    pub fn item_prepend(i: *mut cst_item, new_item: *mut cst_item)
                        -> *mut cst_item;
    pub fn item_parent(i: *const cst_item) -> *mut cst_item;
    pub fn item_nth_daughter(i: *const cst_item, n: ::std::os::raw::c_int)
                             -> *mut cst_item;
    pub fn item_daughter(i: *const cst_item) -> *mut cst_item;
    pub fn item_last_daughter(i: *const cst_item) -> *mut cst_item;
    pub fn item_add_daughter(i: *mut cst_item, new_item: *mut cst_item)
                             -> *mut cst_item;
    pub fn item_append_sibling(i: *mut cst_item, new_item: *mut cst_item)
                               -> *mut cst_item;
    pub fn item_prepend_sibling(i: *mut cst_item, new_item: *mut cst_item)
                                -> *mut cst_item;
    pub fn item_feat_present(i: *const cst_item,
                             name: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    pub fn item_feat_remove(i: *const cst_item,
                            name: *const ::std::os::raw::c_char)
                            -> ::std::os::raw::c_int;
    pub fn item_feats(i: *const cst_item) -> *mut cst_features;
    pub fn item_feat(i: *const cst_item, name: *const ::std::os::raw::c_char)
                     -> *const cst_val;
    pub fn item_feat_int(i: *const cst_item,
                         name: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn item_feat_float(i: *const cst_item,
                           name: *const ::std::os::raw::c_char) -> f32;
    pub fn item_feat_string(i: *const cst_item,
                            name: *const ::std::os::raw::c_char)
                            -> *const ::std::os::raw::c_char;
    pub fn item_set(i: *const cst_item, name: *const ::std::os::raw::c_char,
                    val: *const cst_val);
    pub fn item_set_int(i: *const cst_item,
                        name: *const ::std::os::raw::c_char,
                        val: ::std::os::raw::c_int);
    pub fn item_set_float(i: *const cst_item,
                          name: *const ::std::os::raw::c_char, val: f32);
    pub fn item_set_string(i: *const cst_item,
                           name: *const ::std::os::raw::c_char,
                           val: *const ::std::os::raw::c_char);
    pub fn item_equal(a: *const cst_item, b: *const cst_item)
                      -> ::std::os::raw::c_int;
    pub fn ffeature_string(item: *const cst_item,
                           featpath: *const ::std::os::raw::c_char)
                           -> *const ::std::os::raw::c_char;
    pub fn ffeature_int(item: *const cst_item,
                        featpath: *const ::std::os::raw::c_char)
                        -> ::std::os::raw::c_int;
    pub fn ffeature_float(item: *const cst_item,
                          featpath: *const ::std::os::raw::c_char) -> f32;
    pub fn ffeature(item: *const cst_item,
                    featpath: *const ::std::os::raw::c_char)
                    -> *const cst_val;
    pub fn path_to_item(item: *const cst_item,
                        featpath: *const ::std::os::raw::c_char)
                        -> *mut cst_item;
    pub fn val_ffunc(v: *const cst_val) -> cst_ffunction;
    pub fn ffunc_val(v: cst_ffunction) -> *mut cst_val;
    pub fn ff_register(ffeatures: *mut cst_features,
                       name: *const ::std::os::raw::c_char, f: cst_ffunction);
    pub fn ff_unregister(ffeatures: *mut cst_features,
                         name: *const ::std::os::raw::c_char);
    pub fn val_itemfunc(v: *const cst_val) -> cst_itemfunc;
    pub fn itemfunc_val(v: cst_itemfunc) -> *mut cst_val;
    pub fn new_utterance() -> *mut cst_utterance;
    pub fn delete_utterance(u: *mut cst_utterance);
    pub fn utt_relation(u: *const cst_utterance,
                        name: *const ::std::os::raw::c_char)
                        -> *mut cst_relation;
    pub fn utt_relation_create(u: *mut cst_utterance,
                               name: *const ::std::os::raw::c_char)
                               -> *mut cst_relation;
    pub fn utt_relation_delete(u: *mut cst_utterance,
                               name: *const ::std::os::raw::c_char)
                               -> ::std::os::raw::c_int;
    pub fn utt_relation_present(u: *mut cst_utterance,
                                name: *const ::std::os::raw::c_char)
                                -> ::std::os::raw::c_int;
    pub fn val_uttfunc(v: *const cst_val) -> cst_uttfunc;
    pub fn uttfunc_val(v: cst_uttfunc) -> *mut cst_val;
    pub fn new_relation(name: *const ::std::os::raw::c_char,
                        u: *mut cst_utterance) -> *mut cst_relation;
    pub fn delete_relation(r: *mut cst_relation);
    pub fn relation_head(r: *mut cst_relation) -> *mut cst_item;
    pub fn relation_tail(r: *mut cst_relation) -> *mut cst_item;
    pub fn relation_name(r: *mut cst_relation)
                         -> *const ::std::os::raw::c_char;
    pub fn relation_append(r: *mut cst_relation, i: *mut cst_item)
                           -> *mut cst_item;
    pub fn relation_prepend(r: *mut cst_relation, i: *mut cst_item)
                            -> *mut cst_item;
    pub fn relation_load(r: *mut cst_relation,
                         filename: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn relation_save(r: *mut cst_relation,
                         filename: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn swap_bytes_short(b: *mut ::std::os::raw::c_short,
                            n: ::std::os::raw::c_int);
    pub fn swapdouble(d: *mut f64);
    pub fn swapfloat(f: *mut f32);
    pub fn new_wave() -> *mut cst_wave;
    pub fn copy_wave(w: *const cst_wave) -> *mut cst_wave;
    pub fn delete_wave(val: *mut cst_wave);
    pub fn concat_wave(dest: *mut cst_wave, src: *const cst_wave)
                       -> *mut cst_wave;
    pub fn cst_wave_save(w: *mut cst_wave,
                         filename: *const ::std::os::raw::c_char,
                         type_: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn cst_wave_save_riff(w: *mut cst_wave,
                              filename: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn cst_wave_save_raw(w: *mut cst_wave,
                             filename: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    pub fn cst_wave_append_riff(w: *mut cst_wave,
                                filename: *const ::std::os::raw::c_char)
                                -> ::std::os::raw::c_int;
    pub fn cst_wave_save_riff_fd(w: *mut cst_wave, fd: cst_file)
                                 -> ::std::os::raw::c_int;
    pub fn cst_wave_save_raw_fd(w: *mut cst_wave, fd: cst_file)
                                -> ::std::os::raw::c_int;
    pub fn cst_wave_load(w: *mut cst_wave,
                         filename: *const ::std::os::raw::c_char,
                         type_: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn cst_wave_load_riff(w: *mut cst_wave,
                              filename: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn cst_wave_load_raw(w: *mut cst_wave,
                             filename: *const ::std::os::raw::c_char,
                             bo: *const ::std::os::raw::c_char,
                             sample_rate: ::std::os::raw::c_int)
                             -> ::std::os::raw::c_int;
    pub fn cst_wave_load_riff_header(header: *mut cst_wave_header,
                                     fd: cst_file) -> ::std::os::raw::c_int;
    pub fn cst_wave_load_riff_fd(w: *mut cst_wave, fd: cst_file)
                                 -> ::std::os::raw::c_int;
    pub fn cst_wave_load_raw_fd(w: *mut cst_wave, fd: cst_file,
                                bo: *const ::std::os::raw::c_char,
                                sample_rate: ::std::os::raw::c_int)
                                -> ::std::os::raw::c_int;
    pub fn cst_wave_resize(w: *mut cst_wave, samples: ::std::os::raw::c_int,
                           num_channels: ::std::os::raw::c_int);
    pub fn cst_wave_resample(w: *mut cst_wave,
                             sample_rate: ::std::os::raw::c_int);
    pub fn cst_wave_rescale(w: *mut cst_wave, factor: ::std::os::raw::c_int);
    pub fn new_rateconv(up: ::std::os::raw::c_int,
                        down: ::std::os::raw::c_int,
                        channels: ::std::os::raw::c_int) -> *mut cst_rateconv;
    pub fn delete_rateconv(filt: *mut cst_rateconv);
    pub fn cst_rateconv_in(filt: *mut cst_rateconv,
                           inptr: *const ::std::os::raw::c_short,
                           max: ::std::os::raw::c_int)
                           -> ::std::os::raw::c_int;
    pub fn cst_rateconv_leadout(filt: *mut cst_rateconv)
                                -> ::std::os::raw::c_int;
    pub fn cst_rateconv_out(filt: *mut cst_rateconv,
                            outptr: *mut ::std::os::raw::c_short,
                            max: ::std::os::raw::c_int)
                            -> ::std::os::raw::c_int;
    pub fn cst_short_to_ulaw(sample: ::std::os::raw::c_short)
                             -> ::std::os::raw::c_uchar;
    pub fn cst_ulaw_to_short(ulawbyte: ::std::os::raw::c_uchar)
                             -> ::std::os::raw::c_short;
    pub fn cst_g721_decode(actual_size: *mut ::std::os::raw::c_int,
                           size: ::std::os::raw::c_int,
                           packed_residual: *const ::std::os::raw::c_uchar)
                           -> *mut ::std::os::raw::c_uchar;
    pub fn cst_g721_encode(packed_size: *mut ::std::os::raw::c_int,
                           actual_size: ::std::os::raw::c_int,
                           unpacked_residual: *const ::std::os::raw::c_uchar)
                           -> *mut ::std::os::raw::c_uchar;
    pub fn val_wave(v: *const cst_val) -> *mut cst_wave;
    pub fn wave_val(v: *const cst_wave) -> *mut cst_val;
    pub fn new_track() -> *mut cst_track;
    pub fn delete_track(val: *mut cst_track);
    pub fn track_frame_shift(t: *mut cst_track, frame: ::std::os::raw::c_int)
                             -> f32;
    pub fn cst_track_resize(t: *mut cst_track,
                            num_frames: ::std::os::raw::c_int,
                            num_channels: ::std::os::raw::c_int);
    pub fn cst_track_copy(t: *const cst_track) -> *mut cst_track;
    pub fn cst_track_save_est(t: *mut cst_track,
                              filename: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn cst_track_save_est_binary(t: *mut cst_track,
                                     filename: *const ::std::os::raw::c_char)
                                     -> ::std::os::raw::c_int;
    pub fn cst_track_load_est(t: *mut cst_track,
                              filename: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn val_track(v: *const cst_val) -> *mut cst_track;
    pub fn track_val(v: *const cst_track) -> *mut cst_val;
    pub fn delete_cart(c: *mut cst_cart);
    pub fn val_cart(v: *const cst_val) -> *mut cst_cart;
    pub fn cart_val(v: *const cst_cart) -> *mut cst_val;
    pub fn cart_interpret(item: *mut cst_item, tree: *const cst_cart)
                          -> *const cst_val;
    pub fn new_phoneset() -> *mut cst_phoneset;
    pub fn delete_phoneset(u: *const cst_phoneset);
    pub fn phone_feature(ps: *const cst_phoneset,
                         phonename: *const ::std::os::raw::c_char,
                         featname: *const ::std::os::raw::c_char)
                         -> *const cst_val;
    pub fn phone_feature_string(ps: *const cst_phoneset,
                                phonename: *const ::std::os::raw::c_char,
                                featname: *const ::std::os::raw::c_char)
                                -> *const ::std::os::raw::c_char;
    pub fn phone_id(ps: *const cst_phoneset,
                    phonename: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn phone_feat_id(ps: *const cst_phoneset,
                         featname: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn item_phoneset(i: *const cst_item) -> *const cst_phoneset;
    pub fn val_phoneset(v: *const cst_val) -> *mut cst_phoneset;
    pub fn phoneset_val(v: *const cst_phoneset) -> *mut cst_val;
    pub fn new_lts_rules() -> *mut cst_lts_rules;
    pub fn lts_apply(word: *const ::std::os::raw::c_char,
                     feats: *const ::std::os::raw::c_char,
                     r: *const cst_lts_rules) -> *mut cst_val;
    pub fn lts_apply_val(wlist: *const cst_val,
                         feats: *const ::std::os::raw::c_char,
                         r: *const cst_lts_rules) -> *mut cst_val;
    pub fn new_lexicon() -> *mut cst_lexicon;
    pub fn delete_lexicon(lex: *mut cst_lexicon);
    pub fn cst_lex_make_entry(lex: *const cst_lexicon,
                              entry: *const cst_string) -> *mut cst_val;
    pub fn cst_lex_load_addenda(lex: *const cst_lexicon,
                                lexfile: *const ::std::os::raw::c_char)
                                -> *mut cst_val;
    pub fn lex_lookup(l: *const cst_lexicon,
                      word: *const ::std::os::raw::c_char,
                      pos: *const ::std::os::raw::c_char,
                      feats: *const cst_features) -> *mut cst_val;
    pub fn in_lex(l: *const cst_lexicon, word: *const ::std::os::raw::c_char,
                  pos: *const ::std::os::raw::c_char,
                  feats: *const cst_features) -> ::std::os::raw::c_int;
    pub fn val_lexicon(v: *const cst_val) -> *mut cst_lexicon;
    pub fn lexicon_val(v: *const cst_lexicon) -> *mut cst_val;
    pub fn new_voice() -> *mut cst_voice;
    pub fn delete_voice(u: *mut cst_voice);
    pub fn val_voice(v: *const cst_val) -> *mut cst_voice;
    pub fn voice_val(v: *const cst_voice) -> *mut cst_val;
    pub fn audio_bps(fmt: cst_audiofmt) -> ::std::os::raw::c_int;
    pub fn audio_open(sps: ::std::os::raw::c_int,
                      channels: ::std::os::raw::c_int, fmt: cst_audiofmt)
                      -> *mut cst_audiodev;
    pub fn audio_close(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
    pub fn audio_write(ad: *mut cst_audiodev,
                       buff: *mut ::std::os::raw::c_void,
                       num_bytes: ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    pub fn audio_flush(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
    pub fn audio_drain(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
    pub fn play_wave(w: *mut cst_wave) -> ::std::os::raw::c_int;
    pub fn play_wave_sync(w: *mut cst_wave, rel: *mut cst_relation,
                          call_back:
                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut cst_item)
                                                                     ->
                                                                     ::std::os::raw::c_int>)
                          -> ::std::os::raw::c_int;
    pub fn play_wave_client(w: *mut cst_wave,
                            servername: *const ::std::os::raw::c_char,
                            port: ::std::os::raw::c_int,
                            encoding: *const ::std::os::raw::c_char)
                            -> ::std::os::raw::c_int;
    pub fn auserver(port: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn play_wave_device(w: *mut cst_wave, ad: *mut cst_audiodev)
                            -> ::std::os::raw::c_int;
    pub fn audio_open_file(sps: ::std::os::raw::c_int,
                           channels: ::std::os::raw::c_int, fmt: cst_audiofmt,
                           filename: *const ::std::os::raw::c_char)
                           -> *mut cst_audiodev;
    pub fn audio_close_file(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
    pub fn audio_write_file(ad: *mut cst_audiodev,
                            buff: *mut ::std::os::raw::c_void,
                            num_bytes: ::std::os::raw::c_int)
                            -> ::std::os::raw::c_int;
    pub fn audio_drain_file(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
    pub fn audio_flush_file(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
    pub fn new_audio_streaming_info() -> *mut cst_audio_streaming_info;
    pub fn delete_audio_streaming_info(asi: *mut cst_audio_streaming_info);
    pub fn val_audio_streaming_info(v: *const cst_val)
                                    -> *mut cst_audio_streaming_info;
    pub fn audio_streaming_info_val(v: *const cst_audio_streaming_info)
                                    -> *mut cst_val;
    pub fn audio_stream_chunk(w: *const cst_wave,
                              start: ::std::os::raw::c_int,
                              size: ::std::os::raw::c_int,
                              last: ::std::os::raw::c_int,
                              asi: *mut cst_audio_streaming_info)
                              -> ::std::os::raw::c_int;
    pub fn utt_set_wave(u: *mut cst_utterance, w: *mut cst_wave)
                        -> ::std::os::raw::c_int;
    pub fn utt_wave(u: *mut cst_utterance) -> *mut cst_wave;
    pub fn utt_input_text(u: *mut cst_utterance)
                          -> *const ::std::os::raw::c_char;
    pub fn utt_set_input_text(u: *mut cst_utterance,
                              text: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn ts_open(filename: *const ::std::os::raw::c_char,
                   whitespacesymbols: *const cst_string,
                   singlecharsymbols: *const cst_string,
                   prepunctsymbols: *const cst_string,
                   postpunctsymbols: *const cst_string)
                   -> *mut cst_tokenstream;
    pub fn ts_open_string(string: *const cst_string,
                          whitespacesymbols: *const cst_string,
                          singlecharsymbols: *const cst_string,
                          prepunctsymbols: *const cst_string,
                          postpunctsymbols: *const cst_string)
                          -> *mut cst_tokenstream;
    pub fn ts_open_generic(filename: *const ::std::os::raw::c_char,
                           whitespacesymbols: *const cst_string,
                           singlecharsymbols: *const cst_string,
                           prepunctsymbols: *const cst_string,
                           postpunctsymbols: *const cst_string,
                           streamtype_data: *mut ::std::os::raw::c_void,
                           open:
                           ::std::option::Option<unsafe extern "C" fn(ts:
                                                                      *mut cst_tokenstream,
                                                                      filename:
                                                                      *const ::std::os::raw::c_char)
                                                                      ->
                                                                      ::std::os::raw::c_int>,
                           close:
                           ::std::option::Option<unsafe extern "C" fn(ts:
                                                                      *mut cst_tokenstream)>,
                           eof:
                           ::std::option::Option<unsafe extern "C" fn(ts:
                                                                      *mut cst_tokenstream)
                                                                      ->
                                                                      ::std::os::raw::c_int>,
                           seek:
                           ::std::option::Option<unsafe extern "C" fn(ts:
                                                                      *mut cst_tokenstream,
                                                                      pos:
                                                                      ::std::os::raw::c_int)
                                                                      ->
                                                                      ::std::os::raw::c_int>,
                           tell:
                           ::std::option::Option<unsafe extern "C" fn(ts:
                                                                      *mut cst_tokenstream)
                                                                      ->
                                                                      ::std::os::raw::c_int>,
                           size:
                           ::std::option::Option<unsafe extern "C" fn(ts:
                                                                      *mut cst_tokenstream)
                                                                      ->
                                                                      ::std::os::raw::c_int>,
                           getc:
                           ::std::option::Option<unsafe extern "C" fn(ts:
                                                                      *mut cst_tokenstream)
                                                                      ->
                                                                      ::std::os::raw::c_int>)
                           -> *mut cst_tokenstream;
    pub fn ts_close(ts: *mut cst_tokenstream);
    pub fn ts_eof(ts: *mut cst_tokenstream) -> ::std::os::raw::c_int;
    pub fn ts_get(ts: *mut cst_tokenstream) -> *const cst_string;
    pub fn ts_get_quoted_token(ts: *mut cst_tokenstream,
                               quote: ::std::os::raw::c_char,
                               escape: ::std::os::raw::c_char)
                               -> *const cst_string;
    pub fn private_ts_getc(ts: *mut cst_tokenstream) -> cst_string;
    pub fn set_charclasses(ts: *mut cst_tokenstream,
                           whitespace: *const cst_string,
                           singlecharsymbols: *const cst_string,
                           prepunctuation: *const cst_string,
                           postpunctuation: *const cst_string);
    pub fn ts_read(buff: *mut ::std::os::raw::c_void,
                   size: ::std::os::raw::c_int, num: ::std::os::raw::c_int,
                   ts: *mut cst_tokenstream) -> ::std::os::raw::c_int;
    pub fn ts_set_stream_pos(ts: *mut cst_tokenstream,
                             pos: ::std::os::raw::c_int)
                             -> ::std::os::raw::c_int;
    pub fn ts_get_stream_pos(ts: *mut cst_tokenstream)
                             -> ::std::os::raw::c_int;
    pub fn ts_get_stream_size(ts: *mut cst_tokenstream)
                              -> ::std::os::raw::c_int;
    pub fn val_breakfunc(v: *const cst_val) -> cst_breakfunc;
    pub fn breakfunc_val(v: cst_breakfunc) -> *mut cst_val;
    pub fn default_utt_break(ts: *mut cst_tokenstream,
                             token: *const ::std::os::raw::c_char,
                             tokens: *mut cst_relation)
                             -> ::std::os::raw::c_int;
    pub fn utt_init(u: *mut cst_utterance, vox: *mut cst_voice)
                    -> *mut cst_utterance;
    pub fn utt_synth(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn utt_synth_phones(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn utt_synth_tokens(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn utt_synth_wave(w: *mut cst_wave, v: *mut cst_voice)
                          -> *mut cst_utterance;
    pub fn val_dur_stats(v: *const cst_val) -> *mut dur_stats;
    pub fn dur_stats_val(v: *const dur_stats) -> *mut cst_val;
    pub fn default_segmentanalysis(u: *mut cst_utterance)
                                   -> *mut cst_utterance;
    pub fn default_tokenization(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn default_textanalysis(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn default_tokentowords(i: *mut cst_item) -> *mut cst_val;
    pub fn default_phrasing(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn default_pos_tagger(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn default_lexical_insertion(u: *mut cst_utterance)
                                     -> *mut cst_utterance;
    pub fn default_pause_insertion(u: *mut cst_utterance)
                                   -> *mut cst_utterance;
    pub fn cart_intonation(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn cart_duration(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn flat_prosody(u: *mut cst_utterance) -> *mut cst_utterance;
    pub fn apply_synth_module(u: *mut cst_utterance,
                              mod_: *const cst_synth_module)
                              -> *mut cst_utterance;
    pub fn apply_synth_method(u: *mut cst_utterance,
                              meth: *mut cst_synth_module)
                              -> *mut cst_utterance;
    pub fn new_lpcres() -> *mut cst_lpcres;
    pub fn delete_lpcres(l: *mut cst_lpcres);
    pub fn lpcres_frame_shift(t: *mut cst_lpcres,
                              frame: ::std::os::raw::c_int) -> f32;
    pub fn lpcres_resize_frames(l: *mut cst_lpcres,
                                num_frames: ::std::os::raw::c_int);
    pub fn lpcres_resize_samples(l: *mut cst_lpcres,
                                 num_samples: ::std::os::raw::c_int);
    pub fn new_sts_list() -> *mut cst_sts_list;
    pub fn delete_sts_list(l: *mut cst_sts_list);
    pub fn get_sts_frame(sts_list: *const cst_sts_list,
                         frame: ::std::os::raw::c_int)
                         -> *const ::std::os::raw::c_ushort;
    pub fn get_sts_residual(sts_list: *const cst_sts_list,
                            frame: ::std::os::raw::c_int)
                            -> *const ::std::os::raw::c_uchar;
    pub fn get_sts_residual_fixed(sts_list: *const cst_sts_list,
                                  frame: ::std::os::raw::c_int)
                                  -> *const ::std::os::raw::c_uchar;
    pub fn get_frame_size(sts_list: *const cst_sts_list,
                          frame: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    pub fn get_unit_size(s: *const cst_sts_list, start: ::std::os::raw::c_int,
                         end: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn val_lpcres(v: *const cst_val) -> *mut cst_lpcres;
    pub fn lpcres_val(v: *const cst_lpcres) -> *mut cst_val;
    pub fn val_sts_list(v: *const cst_val) -> *mut cst_sts_list;
    pub fn sts_list_val(v: *const cst_sts_list) -> *mut cst_val;
    pub fn join_units(utt: *mut cst_utterance) -> *mut cst_utterance;
    pub fn join_units_windowed(utt: *mut cst_utterance) -> *mut cst_utterance;
    pub fn join_units_simple(utt: *mut cst_utterance) -> *mut cst_utterance;
    pub fn join_units_modified_lpc(utt: *mut cst_utterance)
                                   -> *mut cst_utterance;
    pub fn asis_to_pm(utt: *mut cst_utterance) -> *mut cst_utterance;
    pub fn f0_targets_to_pm(utt: *mut cst_utterance) -> *mut cst_utterance;
    pub fn concat_units(utt: *mut cst_utterance) -> *mut cst_utterance;
    pub fn add_residual(targ_size: ::std::os::raw::c_int,
                        targ_residual: *mut ::std::os::raw::c_uchar,
                        unit_size: ::std::os::raw::c_int,
                        unit_residual: *const ::std::os::raw::c_uchar);
    pub fn add_residual_pulse(targ_size: ::std::os::raw::c_int,
                              targ_residual: *mut ::std::os::raw::c_uchar,
                              unit_size: ::std::os::raw::c_int,
                              unit_residual: *const ::std::os::raw::c_uchar);
    pub fn flite_init() -> ::std::os::raw::c_int;
    pub fn flite_voice_select(name: *const ::std::os::raw::c_char)
                              -> *mut cst_voice;
    pub fn flite_voice_load(voice_filename: *const ::std::os::raw::c_char)
                            -> *mut cst_voice;
    pub fn flite_voice_dump(voice: *mut cst_voice,
                            voice_filename: *const ::std::os::raw::c_char)
                            -> ::std::os::raw::c_int;
    pub fn flite_file_to_speech(filename: *const ::std::os::raw::c_char,
                                voice: *mut cst_voice,
                                outtype: *const ::std::os::raw::c_char)
                                -> f32;
    pub fn flite_text_to_speech(text: *const ::std::os::raw::c_char,
                                voice: *mut cst_voice,
                                outtype: *const ::std::os::raw::c_char)
                                -> f32;
    pub fn flite_phones_to_speech(text: *const ::std::os::raw::c_char,
                                  voice: *mut cst_voice,
                                  outtype: *const ::std::os::raw::c_char)
                                  -> f32;
    pub fn flite_ssml_file_to_speech(filename: *const ::std::os::raw::c_char,
                                     voice: *mut cst_voice,
                                     outtype: *const ::std::os::raw::c_char)
                                     -> f32;
    pub fn flite_ssml_text_to_speech(text: *const ::std::os::raw::c_char,
                                     voice: *mut cst_voice,
                                     outtype: *const ::std::os::raw::c_char)
                                     -> f32;
    pub fn flite_voice_add_lex_addenda(v: *mut cst_voice,
                                       lexfile: *const cst_string)
                                       -> ::std::os::raw::c_int;
    pub fn flite_text_to_wave(text: *const ::std::os::raw::c_char,
                              voice: *mut cst_voice) -> *mut cst_wave;
    pub fn flite_synth_text(text: *const ::std::os::raw::c_char,
                            voice: *mut cst_voice) -> *mut cst_utterance;
    pub fn flite_synth_phones(phones: *const ::std::os::raw::c_char,
                              voice: *mut cst_voice) -> *mut cst_utterance;
    pub fn flite_ts_to_speech(ts: *mut cst_tokenstream, voice: *mut cst_voice,
                              outtype: *const ::std::os::raw::c_char) -> f32;
    pub fn flite_do_synth(u: *mut cst_utterance, voice: *mut cst_voice,
                          synth: cst_uttfunc) -> *mut cst_utterance;
    pub fn flite_process_output(u: *mut cst_utterance,
                                outtype: *const ::std::os::raw::c_char,
                                append: ::std::os::raw::c_int) -> f32;
    pub fn flite_mmap_clunit_voxdata(voxdir: *const ::std::os::raw::c_char,
                                     voice: *mut cst_voice)
                                     -> ::std::os::raw::c_int;
    pub fn flite_munmap_clunit_voxdata(voice: *mut cst_voice)
                                       -> ::std::os::raw::c_int;
    pub fn flite_get_param_int(f: *const cst_features,
                               name: *const ::std::os::raw::c_char,
                               def: ::std::os::raw::c_int)
                               -> ::std::os::raw::c_int;
    pub fn flite_get_param_float(f: *const cst_features,
                                 name: *const ::std::os::raw::c_char,
                                 def: f32) -> f32;
    pub fn flite_get_param_string(f: *const cst_features,
                                  name: *const ::std::os::raw::c_char,
                                  def: *const ::std::os::raw::c_char)
                                  -> *const ::std::os::raw::c_char;
    pub fn flite_get_param_val(f: *const cst_features,
                               name: *const ::std::os::raw::c_char,
                               def: *mut cst_val) -> *const cst_val;
    pub fn flite_feat_set_int(f: *mut cst_features,
                              name: *const ::std::os::raw::c_char,
                              v: ::std::os::raw::c_int);
    pub fn flite_feat_set_float(f: *mut cst_features,
                                name: *const ::std::os::raw::c_char, v: f32);
    pub fn flite_feat_set_string(f: *mut cst_features,
                                 name: *const ::std::os::raw::c_char,
                                 v: *const ::std::os::raw::c_char);
    pub fn flite_feat_set(f: *mut cst_features,
                          name: *const ::std::os::raw::c_char,
                          v: *const cst_val);
    pub fn flite_feat_remove(f: *mut cst_features,
                             name: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    pub fn flite_ffeature_string(item: *const cst_item,
                                 featpath: *const ::std::os::raw::c_char)
                                 -> *const ::std::os::raw::c_char;
    pub fn flite_ffeature_int(item: *const cst_item,
                              featpath: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    pub fn flite_ffeature_float(item: *const cst_item,
                                featpath: *const ::std::os::raw::c_char)
                                -> f32;
    pub fn flite_ffeature(item: *const cst_item,
                          featpath: *const ::std::os::raw::c_char)
                          -> *const cst_val;
    pub fn flite_path_to_item(item: *const cst_item,
                              featpath: *const ::std::os::raw::c_char)
                              -> *mut cst_item;
    pub fn flite_add_voice(voice: *mut cst_voice) -> ::std::os::raw::c_int;
    pub fn flite_add_lang(langname: *const ::std::os::raw::c_char,
                          lang_init:
                          ::std::option::Option<unsafe extern "C" fn(vox:
                                                                     *mut cst_voice)>,
                          lex_init:
                          ::std::option::Option<extern "C" fn()
                              -> *mut cst_lexicon>)
                          -> ::std::os::raw::c_int;
    pub fn utf8_grapheme_lang_init(v: *mut cst_voice);
    pub fn utf8_grapheme_lex_init() -> *mut cst_lexicon;
}
